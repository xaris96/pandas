from __future__ import annotations

from ._core._eventloop import (
    current_time as current_time,
    get_all_backends as get_all_backends,
    get_cancelled_exc_class as get_cancelled_exc_class,
    run as run,
    sleep as sleep,
    sleep_forever as sleep_forever,
    sleep_until as sleep_until,
)
from ._core._exceptions import (
    BrokenResourceError as BrokenResourceError,
    BrokenWorkerIntepreter as BrokenWorkerIntepreter,
    BrokenWorkerProcess as BrokenWorkerProcess,
    BusyResourceError as BusyResourceError,
    ClosedResourceError as ClosedResourceError,
    DelimiterNotFound as DelimiterNotFound,
    EndOfStream as EndOfStream,
    IncompleteRead as IncompleteRead,
    TypedAttributeLookupError as TypedAttributeLookupError,
    WouldBlock as WouldBlock,
)
from ._core._fileio import (
    AsyncFile as AsyncFile,
    Path as Path,
    open_file as open_file,
    wrap_file as wrap_file,
)
from ._core._resources import aclose_forcefully as aclose_forcefully
from ._core._signals import open_signal_receiver as open_signal_receiver
from ._core._sockets import (
    connect_tcp as connect_tcp,
    connect_unix as connect_unix,
    create_connected_udp_socket as create_connected_udp_socket,
    create_connected_unix_datagram_socket as create_connected_unix_datagram_socket,
    create_tcp_listener as create_tcp_listener,
    create_udp_socket as create_udp_socket,
    create_unix_datagram_socket as create_unix_datagram_socket,
    create_unix_listener as create_unix_listener,
    getaddrinfo as getaddrinfo,
    getnameinfo as getnameinfo,
    wait_readable as wait_readable,
    wait_socket_readable as wait_socket_readable,
    wait_socket_writable as wait_socket_writable,
    wait_writable as wait_writable,
)
from ._core._streams import create_memory_object_stream as create_memory_object_stream
from ._core._subprocesses import (
    open_process as open_process,
    run_process as run_process,
)
from ._core._synchronization import (
    CapacityLimiter as CapacityLimiter,
    CapacityLimiterStatistics as CapacityLimiterStatistics,
    Condition as Condition,
    ConditionStatistics as ConditionStatistics,
    Event as Event,
    EventStatistics as EventStatistics,
    Lock as Lock,
    LockStatistics as LockStatistics,
    ResourceGuard as ResourceGuard,
    Semaphore as Semaphore,
    SemaphoreStatistics as SemaphoreStatistics,
)
from ._core._tasks import (
    TASK_STATUS_IGNORED as TASK_STATUS_IGNORED,
    CancelScope as CancelScope,
    create_task_group as create_task_group,
    current_effective_deadline as current_effective_deadline,
    fail_after as fail_after,
    move_on_after as move_on_after,
)
from ._core._tempfile import (
    NamedTemporaryFile as NamedTemporaryFile,
    SpooledTemporaryFile as SpooledTemporaryFile,
    TemporaryDirectory as TemporaryDirectory,
    TemporaryFile as TemporaryFile,
    gettempdir as gettempdir,
    gettempdirb as gettempdirb,
    mkdtemp as mkdtemp,
    mkstemp as mkstemp,
)
from ._core._testing import (
    TaskInfo as TaskInfo,
    get_current_task as get_current_task,
    get_running_tasks as get_running_tasks,
    wait_all_tasks_blocked as wait_all_tasks_blocked,
)
from ._core._typedattr import (
    TypedAttributeProvider as TypedAttributeProvider,
    TypedAttributeSet as TypedAttributeSet,
    typed_attribute as typed_attribute,
)

# Re-export imports so they look like they live directly in this package
for __value in list(locals().values()):
    if getattr(__value, "__module__", "").startswith("anyio."):
        __value.__module__ = __name__

del __value
