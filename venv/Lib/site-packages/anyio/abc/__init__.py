from __future__ import annotations

from ._eventloop import AsyncBackend as AsyncBackend
from ._resources import AsyncResource as AsyncResource
from ._sockets import (
    ConnectedUDPSocket as ConnectedUDPSocket,
    ConnectedUNIXDatagramSocket as ConnectedUNIXDatagramSocket,
    IPAddressType as IPAddressType,
    IPSockAddrType as IPSockAddrType,
    SocketAttribute as SocketAttribute,
    SocketListener as SocketListener,
    SocketStream as SocketStream,
    UDPPacketType as UDPPacketType,
    UDPSocket as UDPSocket,
    UNIXDatagramPacketType as UNIXDatagramPacketType,
    UNIXDatagramSocket as UNIXDatagramSocket,
    UNIXSocketStream as UNIXSocketStream,
)
from ._streams import (
    AnyByteReceiveStream as AnyByteReceiveStream,
    AnyByteSendStream as AnyByteSendStream,
    AnyByteStream as AnyByteStream,
    AnyUnreliableByteReceiveStream as AnyUnreliableByteReceiveStream,
    AnyUnreliableByteSendStream as AnyUnreliableByteSendStream,
    AnyUnreliableByteStream as AnyUnreliableByteStream,
    ByteReceiveStream as ByteReceiveStream,
    ByteSendStream as ByteSendStream,
    ByteStream as ByteStream,
    Listener as Listener,
    ObjectReceiveStream as ObjectReceiveStream,
    ObjectSendStream as ObjectSendStream,
    ObjectStream as ObjectStream,
    UnreliableObjectReceiveStream as UnreliableObjectReceiveStream,
    UnreliableObjectSendStream as UnreliableObjectSendStream,
    UnreliableObjectStream as UnreliableObjectStream,
)
from ._subprocesses import Process as Process
from ._tasks import (
    TaskGroup as TaskGroup,
    TaskStatus as TaskStatus,
)
from ._testing import TestRunner as TestRunner

# Re-exported here, for backwards compatibility
# isort: off
from .._core._synchronization import (
    CapacityLimiter as CapacityLimiter,
    Condition as Condition,
    Event as Event,
    Lock as Lock,
    Semaphore as Semaphore,
)
from .._core._tasks import CancelScope as CancelScope
from ..from_thread import BlockingPortal as BlockingPortal

# Re-export imports so they look like they live directly in this package
for __value in list(locals().values()):
    if getattr(__value, "__module__", "").startswith("anyio.abc."):
        __value.__module__ = __name__

del __value
