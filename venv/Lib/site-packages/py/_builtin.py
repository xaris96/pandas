import sys

# Passthrough for builtins supported with py27.
BaseException = BaseException
GeneratorExit = GeneratorExit
_sysex = (KeyboardInterrupt, SystemExit, MemoryError, GeneratorExit)
all = all
any = any
callable = callable
enumerate = enumerate
reversed = reversed
set, frozenset = set, frozenset
sorted = sorted


exec("print_ = print ; exec_=exec")
import builtins

# some backward compatibility helpers
_basestring = str
def _totext(obj, encoding=None, errors=None):
    if isinstance(obj, bytes):
        if errors is None:
            obj = obj.decode(encoding)
        else:
            obj = obj.decode(encoding, errors)
    elif not isinstance(obj, str):
        obj = str(obj)
    return obj

def _isbytes(x):
    return isinstance(x, bytes)

def _istext(x):
    return isinstance(x, str)

text = str
bytes = bytes

def _getimself(function):
    return getattr(function, '__self__', None)

def _getfuncdict(function):
    return getattr(function, "__dict__", None)

def _getcode(function):
    return getattr(function, "__code__", None)

def execfile(fn, globs=None, locs=None):
    if globs is None:
        back = sys._getframe(1)
        globs = back.f_globals
        locs = back.f_locals
        del back
    elif locs is None:
        locs = globs
    fp = open(fn)
    try:
        source = fp.read()
    finally:
        fp.close()
    co = compile(source, fn, "exec", dont_inherit=True)
    exec_(co, globs, locs)


def _reraise(cls, val, tb):
    __tracebackhide__ = True
    assert hasattr(val, '__traceback__')
    raise cls.with_traceback(val, tb)

def _tryimport(*names):
    """ return the first successfully imported module. """
    assert names
    for name in names:
        try:
            __import__(name)
        except ImportError:
            excinfo = sys.exc_info()
        else:
            return sys.modules[name]
    _reraise(*excinfo)
