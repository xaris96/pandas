import os
from typing import Any

from ._checkers import (
    TypeCheckerCallable as TypeCheckerCallable,
    TypeCheckLookupCallback as TypeCheckLookupCallback,
    check_type_internal as check_type_internal,
    checker_lookup_functions as checker_lookup_functions,
    load_plugins as load_plugins,
)
from ._config import (
    CollectionCheckStrategy as CollectionCheckStrategy,
    ForwardRefPolicy as ForwardRefPolicy,
    TypeCheckConfiguration as TypeCheckConfiguration,
)
from ._decorators import (
    typechecked as typechecked,
    typeguard_ignore as typeguard_ignore,
)
from ._exceptions import (
    InstrumentationWarning as InstrumentationWarning,
    TypeCheckError as TypeCheckError,
    TypeCheckWarning as TypeCheckWarning,
    TypeHintWarning as TypeHintWarning,
)
from ._functions import (
    TypeCheckFailCallback as TypeCheckFailCallback,
    check_type as check_type,
    warn_on_error as warn_on_error,
)
from ._importhook import (
    ImportHookManager as ImportHookManager,
    TypeguardFinder as TypeguardFinder,
    install_import_hook as install_import_hook,
)
from ._memo import TypeCheckMemo as TypeCheckMemo
from ._suppression import suppress_type_checks as suppress_type_checks
from ._utils import Unset as Unset

# Re-export imports so they look like they live directly in this package
for value in list(locals().values()):
    if getattr(value, "__module__", "").startswith(f"{__name__}."):
        value.__module__ = __name__


config: TypeCheckConfiguration


def __getattr__(name: str) -> Any:
    if name == "config":
        from ._config import global_config

        return global_config

    raise AttributeError(f"module {__name__!r} has no attribute {name!r}")


# Automatically load checker lookup functions unless explicitly disabled
if "TYPEGUARD_DISABLE_PLUGIN_AUTOLOAD" not in os.environ:
    load_plugins()
