# Generated by Snowball 2.2.0 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class HungarianStemmer(BaseStemmer):
    '''
    This class implements the stemming algorithm defined by a snowball script.
    Generated by Snowball 2.2.0 - https://snowballstem.org/
    '''

    a_0 = [
        Among("cs", -1, -1),
        Among("dzs", -1, -1),
        Among("gy", -1, -1),
        Among("ly", -1, -1),
        Among("ny", -1, -1),
        Among("sz", -1, -1),
        Among("ty", -1, -1),
        Among("zs", -1, -1)
    ]

    a_1 = [
        Among("\u00E1", -1, 1),
        Among("\u00E9", -1, 2)
    ]

    a_2 = [
        Among("bb", -1, -1),
        Among("cc", -1, -1),
        Among("dd", -1, -1),
        Among("ff", -1, -1),
        Among("gg", -1, -1),
        Among("jj", -1, -1),
        Among("kk", -1, -1),
        Among("ll", -1, -1),
        Among("mm", -1, -1),
        Among("nn", -1, -1),
        Among("pp", -1, -1),
        Among("rr", -1, -1),
        Among("ccs", -1, -1),
        Among("ss", -1, -1),
        Among("zzs", -1, -1),
        Among("tt", -1, -1),
        Among("vv", -1, -1),
        Among("ggy", -1, -1),
        Among("lly", -1, -1),
        Among("nny", -1, -1),
        Among("tty", -1, -1),
        Among("ssz", -1, -1),
        Among("zz", -1, -1)
    ]

    a_3 = [
        Among("al", -1, 1),
        Among("el", -1, 1)
    ]

    a_4 = [
        Among("ba", -1, -1),
        Among("ra", -1, -1),
        Among("be", -1, -1),
        Among("re", -1, -1),
        Among("ig", -1, -1),
        Among("nak", -1, -1),
        Among("nek", -1, -1),
        Among("val", -1, -1),
        Among("vel", -1, -1),
        Among("ul", -1, -1),
        Among("n\u00E1l", -1, -1),
        Among("n\u00E9l", -1, -1),
        Among("b\u00F3l", -1, -1),
        Among("r\u00F3l", -1, -1),
        Among("t\u00F3l", -1, -1),
        Among("\u00FCl", -1, -1),
        Among("b\u0151l", -1, -1),
        Among("r\u0151l", -1, -1),
        Among("t\u0151l", -1, -1),
        Among("n", -1, -1),
        Among("an", 19, -1),
        Among("ban", 20, -1),
        Among("en", 19, -1),
        Among("ben", 22, -1),
        Among("k\u00E9ppen", 22, -1),
        Among("on", 19, -1),
        Among("\u00F6n", 19, -1),
        Among("k\u00E9pp", -1, -1),
        Among("kor", -1, -1),
        Among("t", -1, -1),
        Among("at", 29, -1),
        Among("et", 29, -1),
        Among("k\u00E9nt", 29, -1),
        Among("ank\u00E9nt", 32, -1),
        Among("enk\u00E9nt", 32, -1),
        Among("onk\u00E9nt", 32, -1),
        Among("ot", 29, -1),
        Among("\u00E9rt", 29, -1),
        Among("\u00F6t", 29, -1),
        Among("hez", -1, -1),
        Among("hoz", -1, -1),
        Among("h\u00F6z", -1, -1),
        Among("v\u00E1", -1, -1),
        Among("v\u00E9", -1, -1)
    ]

    a_5 = [
        Among("\u00E1n", -1, 2),
        Among("\u00E9n", -1, 1),
        Among("\u00E1nk\u00E9nt", -1, 2)
    ]

    a_6 = [
        Among("stul", -1, 1),
        Among("astul", 0, 1),
        Among("\u00E1stul", 0, 2),
        Among("st\u00FCl", -1, 1),
        Among("est\u00FCl", 3, 1),
        Among("\u00E9st\u00FCl", 3, 3)
    ]

    a_7 = [
        Among("\u00E1", -1, 1),
        Among("\u00E9", -1, 1)
    ]

    a_8 = [
        Among("k", -1, 3),
        Among("ak", 0, 3),
        Among("ek", 0, 3),
        Among("ok", 0, 3),
        Among("\u00E1k", 0, 1),
        Among("\u00E9k", 0, 2),
        Among("\u00F6k", 0, 3)
    ]

    a_9 = [
        Among("\u00E9i", -1, 1),
        Among("\u00E1\u00E9i", 0, 3),
        Among("\u00E9\u00E9i", 0, 2),
        Among("\u00E9", -1, 1),
        Among("k\u00E9", 3, 1),
        Among("ak\u00E9", 4, 1),
        Among("ek\u00E9", 4, 1),
        Among("ok\u00E9", 4, 1),
        Among("\u00E1k\u00E9", 4, 3),
        Among("\u00E9k\u00E9", 4, 2),
        Among("\u00F6k\u00E9", 4, 1),
        Among("\u00E9\u00E9", 3, 2)
    ]

    a_10 = [
        Among("a", -1, 1),
        Among("ja", 0, 1),
        Among("d", -1, 1),
        Among("ad", 2, 1),
        Among("ed", 2, 1),
        Among("od", 2, 1),
        Among("\u00E1d", 2, 2),
        Among("\u00E9d", 2, 3),
        Among("\u00F6d", 2, 1),
        Among("e", -1, 1),
        Among("je", 9, 1),
        Among("nk", -1, 1),
        Among("unk", 11, 1),
        Among("\u00E1nk", 11, 2),
        Among("\u00E9nk", 11, 3),
        Among("\u00FCnk", 11, 1),
        Among("uk", -1, 1),
        Among("juk", 16, 1),
        Among("\u00E1juk", 17, 2),
        Among("\u00FCk", -1, 1),
        Among("j\u00FCk", 19, 1),
        Among("\u00E9j\u00FCk", 20, 3),
        Among("m", -1, 1),
        Among("am", 22, 1),
        Among("em", 22, 1),
        Among("om", 22, 1),
        Among("\u00E1m", 22, 2),
        Among("\u00E9m", 22, 3),
        Among("o", -1, 1),
        Among("\u00E1", -1, 2),
        Among("\u00E9", -1, 3)
    ]

    a_11 = [
        Among("id", -1, 1),
        Among("aid", 0, 1),
        Among("jaid", 1, 1),
        Among("eid", 0, 1),
        Among("jeid", 3, 1),
        Among("\u00E1id", 0, 2),
        Among("\u00E9id", 0, 3),
        Among("i", -1, 1),
        Among("ai", 7, 1),
        Among("jai", 8, 1),
        Among("ei", 7, 1),
        Among("jei", 10, 1),
        Among("\u00E1i", 7, 2),
        Among("\u00E9i", 7, 3),
        Among("itek", -1, 1),
        Among("eitek", 14, 1),
        Among("jeitek", 15, 1),
        Among("\u00E9itek", 14, 3),
        Among("ik", -1, 1),
        Among("aik", 18, 1),
        Among("jaik", 19, 1),
        Among("eik", 18, 1),
        Among("jeik", 21, 1),
        Among("\u00E1ik", 18, 2),
        Among("\u00E9ik", 18, 3),
        Among("ink", -1, 1),
        Among("aink", 25, 1),
        Among("jaink", 26, 1),
        Among("eink", 25, 1),
        Among("jeink", 28, 1),
        Among("\u00E1ink", 25, 2),
        Among("\u00E9ink", 25, 3),
        Among("aitok", -1, 1),
        Among("jaitok", 32, 1),
        Among("\u00E1itok", -1, 2),
        Among("im", -1, 1),
        Among("aim", 35, 1),
        Among("jaim", 36, 1),
        Among("eim", 35, 1),
        Among("jeim", 38, 1),
        Among("\u00E1im", 35, 2),
        Among("\u00E9im", 35, 3)
    ]

    g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 36, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]

    I_p1 = 0

    def __r_mark_regions(self):
        self.I_p1 = self.limit
        try:
            v_1 = self.cursor
            try:
                if not self.in_grouping(HungarianStemmer.g_v, 97, 369):
                    raise lab1()
                if not self.go_in_grouping(HungarianStemmer.g_v, 97, 369):
                    raise lab1()
                try:
                    v_2 = self.cursor
                    try:
                        if self.find_among(HungarianStemmer.a_0) == 0:
                            raise lab3()
                        raise lab2()
                    except lab3: pass
                    self.cursor = v_2
                    if self.cursor >= self.limit:
                        raise lab1()
                    self.cursor += 1
                except lab2: pass
                self.I_p1 = self.cursor
                raise lab0()
            except lab1: pass
            self.cursor = v_1
            if not self.out_grouping(HungarianStemmer.g_v, 97, 369):
                return False
            if not self.go_out_grouping(HungarianStemmer.g_v, 97, 369):
                return False
            self.cursor += 1
            self.I_p1 = self.cursor
        except lab0: pass
        return True

    def __r_R1(self):
        if not self.I_p1 <= self.cursor:
            return False
        return True

    def __r_v_ending(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_1)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_from("a"):
                return False
        else:
            if not self.slice_from("e"):
                return False
        return True

    def __r_double(self):
        v_1 = self.limit - self.cursor
        if self.find_among_b(HungarianStemmer.a_2) == 0:
            return False
        self.cursor = self.limit - v_1
        return True

    def __r_undouble(self):
        if self.cursor <= self.limit_backward:
            return False
        self.cursor -= 1
        self.ket = self.cursor
        c = self.cursor - 1
        if c < self.limit_backward:
            return False
        self.cursor = c
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def __r_instrum(self):
        self.ket = self.cursor
        if self.find_among_b(HungarianStemmer.a_3) == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if not self.__r_double():
            return False
        if not self.slice_del():
            return False

        if not self.__r_undouble():
            return False
        return True

    def __r_case(self):
        self.ket = self.cursor
        if self.find_among_b(HungarianStemmer.a_4) == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if not self.slice_del():
            return False

        if not self.__r_v_ending():
            return False
        return True

    def __r_case_special(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_5)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_from("e"):
                return False
        else:
            if not self.slice_from("a"):
                return False
        return True

    def __r_case_other(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_6)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.slice_from("a"):
                return False
        else:
            if not self.slice_from("e"):
                return False
        return True

    def __r_factive(self):
        self.ket = self.cursor
        if self.find_among_b(HungarianStemmer.a_7) == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if not self.__r_double():
            return False
        if not self.slice_del():
            return False

        if not self.__r_undouble():
            return False
        return True

    def __r_plural(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_8)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_from("a"):
                return False
        elif among_var == 2:
            if not self.slice_from("e"):
                return False
        else:
            if not self.slice_del():
                return False

        return True

    def __r_owned(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_9)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.slice_from("e"):
                return False
        else:
            if not self.slice_from("a"):
                return False
        return True

    def __r_sing_owner(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_10)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.slice_from("a"):
                return False
        else:
            if not self.slice_from("e"):
                return False
        return True

    def __r_plur_owner(self):
        self.ket = self.cursor
        among_var = self.find_among_b(HungarianStemmer.a_11)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.slice_from("a"):
                return False
        else:
            if not self.slice_from("e"):
                return False
        return True

    def _stem(self):
        v_1 = self.cursor
        self.__r_mark_regions()
        self.cursor = v_1
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_2 = self.limit - self.cursor
        self.__r_instrum()
        self.cursor = self.limit - v_2
        v_3 = self.limit - self.cursor
        self.__r_case()
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_case_special()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        self.__r_case_other()
        self.cursor = self.limit - v_5
        v_6 = self.limit - self.cursor
        self.__r_factive()
        self.cursor = self.limit - v_6
        v_7 = self.limit - self.cursor
        self.__r_owned()
        self.cursor = self.limit - v_7
        v_8 = self.limit - self.cursor
        self.__r_sing_owner()
        self.cursor = self.limit - v_8
        v_9 = self.limit - self.cursor
        self.__r_plur_owner()
        self.cursor = self.limit - v_9
        v_10 = self.limit - self.cursor
        self.__r_plural()
        self.cursor = self.limit - v_10
        self.cursor = self.limit_backward
        return True


class lab0(BaseException): pass


class lab1(BaseException): pass


class lab2(BaseException): pass


class lab3(BaseException): pass
