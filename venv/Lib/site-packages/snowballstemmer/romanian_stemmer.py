# Generated by Snowball 2.2.0 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class RomanianStemmer(BaseStemmer):
    '''
    This class implements the stemming algorithm defined by a snowball script.
    Generated by Snowball 2.2.0 - https://snowballstem.org/
    '''

    a_0 = [
        Among("", -1, 3),
        Among("I", 0, 1),
        Among("U", 0, 2)
    ]

    a_1 = [
        Among("ea", -1, 3),
        Among("a\u0163ia", -1, 7),
        Among("aua", -1, 2),
        Among("iua", -1, 4),
        Among("a\u0163ie", -1, 7),
        Among("ele", -1, 3),
        Among("ile", -1, 5),
        Among("iile", 6, 4),
        Among("iei", -1, 4),
        Among("atei", -1, 6),
        Among("ii", -1, 4),
        Among("ului", -1, 1),
        Among("ul", -1, 1),
        Among("elor", -1, 3),
        Among("ilor", -1, 4),
        Among("iilor", 14, 4)
    ]

    a_2 = [
        Among("icala", -1, 4),
        Among("iciva", -1, 4),
        Among("ativa", -1, 5),
        Among("itiva", -1, 6),
        Among("icale", -1, 4),
        Among("a\u0163iune", -1, 5),
        Among("i\u0163iune", -1, 6),
        Among("atoare", -1, 5),
        Among("itoare", -1, 6),
        Among("\u0103toare", -1, 5),
        Among("icitate", -1, 4),
        Among("abilitate", -1, 1),
        Among("ibilitate", -1, 2),
        Among("ivitate", -1, 3),
        Among("icive", -1, 4),
        Among("ative", -1, 5),
        Among("itive", -1, 6),
        Among("icali", -1, 4),
        Among("atori", -1, 5),
        Among("icatori", 18, 4),
        Among("itori", -1, 6),
        Among("\u0103tori", -1, 5),
        Among("icitati", -1, 4),
        Among("abilitati", -1, 1),
        Among("ivitati", -1, 3),
        Among("icivi", -1, 4),
        Among("ativi", -1, 5),
        Among("itivi", -1, 6),
        Among("icit\u0103i", -1, 4),
        Among("abilit\u0103i", -1, 1),
        Among("ivit\u0103i", -1, 3),
        Among("icit\u0103\u0163i", -1, 4),
        Among("abilit\u0103\u0163i", -1, 1),
        Among("ivit\u0103\u0163i", -1, 3),
        Among("ical", -1, 4),
        Among("ator", -1, 5),
        Among("icator", 35, 4),
        Among("itor", -1, 6),
        Among("\u0103tor", -1, 5),
        Among("iciv", -1, 4),
        Among("ativ", -1, 5),
        Among("itiv", -1, 6),
        Among("ical\u0103", -1, 4),
        Among("iciv\u0103", -1, 4),
        Among("ativ\u0103", -1, 5),
        Among("itiv\u0103", -1, 6)
    ]

    a_3 = [
        Among("ica", -1, 1),
        Among("abila", -1, 1),
        Among("ibila", -1, 1),
        Among("oasa", -1, 1),
        Among("ata", -1, 1),
        Among("ita", -1, 1),
        Among("anta", -1, 1),
        Among("ista", -1, 3),
        Among("uta", -1, 1),
        Among("iva", -1, 1),
        Among("ic", -1, 1),
        Among("ice", -1, 1),
        Among("abile", -1, 1),
        Among("ibile", -1, 1),
        Among("isme", -1, 3),
        Among("iune", -1, 2),
        Among("oase", -1, 1),
        Among("ate", -1, 1),
        Among("itate", 17, 1),
        Among("ite", -1, 1),
        Among("ante", -1, 1),
        Among("iste", -1, 3),
        Among("ute", -1, 1),
        Among("ive", -1, 1),
        Among("ici", -1, 1),
        Among("abili", -1, 1),
        Among("ibili", -1, 1),
        Among("iuni", -1, 2),
        Among("atori", -1, 1),
        Among("osi", -1, 1),
        Among("ati", -1, 1),
        Among("itati", 30, 1),
        Among("iti", -1, 1),
        Among("anti", -1, 1),
        Among("isti", -1, 3),
        Among("uti", -1, 1),
        Among("i\u015Fti", -1, 3),
        Among("ivi", -1, 1),
        Among("it\u0103i", -1, 1),
        Among("o\u015Fi", -1, 1),
        Among("it\u0103\u0163i", -1, 1),
        Among("abil", -1, 1),
        Among("ibil", -1, 1),
        Among("ism", -1, 3),
        Among("ator", -1, 1),
        Among("os", -1, 1),
        Among("at", -1, 1),
        Among("it", -1, 1),
        Among("ant", -1, 1),
        Among("ist", -1, 3),
        Among("ut", -1, 1),
        Among("iv", -1, 1),
        Among("ic\u0103", -1, 1),
        Among("abil\u0103", -1, 1),
        Among("ibil\u0103", -1, 1),
        Among("oas\u0103", -1, 1),
        Among("at\u0103", -1, 1),
        Among("it\u0103", -1, 1),
        Among("ant\u0103", -1, 1),
        Among("ist\u0103", -1, 3),
        Among("ut\u0103", -1, 1),
        Among("iv\u0103", -1, 1)
    ]

    a_4 = [
        Among("ea", -1, 1),
        Among("ia", -1, 1),
        Among("esc", -1, 1),
        Among("\u0103sc", -1, 1),
        Among("ind", -1, 1),
        Among("\u00E2nd", -1, 1),
        Among("are", -1, 1),
        Among("ere", -1, 1),
        Among("ire", -1, 1),
        Among("\u00E2re", -1, 1),
        Among("se", -1, 2),
        Among("ase", 10, 1),
        Among("sese", 10, 2),
        Among("ise", 10, 1),
        Among("use", 10, 1),
        Among("\u00E2se", 10, 1),
        Among("e\u015Fte", -1, 1),
        Among("\u0103\u015Fte", -1, 1),
        Among("eze", -1, 1),
        Among("ai", -1, 1),
        Among("eai", 19, 1),
        Among("iai", 19, 1),
        Among("sei", -1, 2),
        Among("e\u015Fti", -1, 1),
        Among("\u0103\u015Fti", -1, 1),
        Among("ui", -1, 1),
        Among("ezi", -1, 1),
        Among("\u00E2i", -1, 1),
        Among("a\u015Fi", -1, 1),
        Among("se\u015Fi", -1, 2),
        Among("ase\u015Fi", 29, 1),
        Among("sese\u015Fi", 29, 2),
        Among("ise\u015Fi", 29, 1),
        Among("use\u015Fi", 29, 1),
        Among("\u00E2se\u015Fi", 29, 1),
        Among("i\u015Fi", -1, 1),
        Among("u\u015Fi", -1, 1),
        Among("\u00E2\u015Fi", -1, 1),
        Among("a\u0163i", -1, 2),
        Among("ea\u0163i", 38, 1),
        Among("ia\u0163i", 38, 1),
        Among("e\u0163i", -1, 2),
        Among("i\u0163i", -1, 2),
        Among("\u00E2\u0163i", -1, 2),
        Among("ar\u0103\u0163i", -1, 1),
        Among("ser\u0103\u0163i", -1, 2),
        Among("aser\u0103\u0163i", 45, 1),
        Among("seser\u0103\u0163i", 45, 2),
        Among("iser\u0103\u0163i", 45, 1),
        Among("user\u0103\u0163i", 45, 1),
        Among("\u00E2ser\u0103\u0163i", 45, 1),
        Among("ir\u0103\u0163i", -1, 1),
        Among("ur\u0103\u0163i", -1, 1),
        Among("\u00E2r\u0103\u0163i", -1, 1),
        Among("am", -1, 1),
        Among("eam", 54, 1),
        Among("iam", 54, 1),
        Among("em", -1, 2),
        Among("asem", 57, 1),
        Among("sesem", 57, 2),
        Among("isem", 57, 1),
        Among("usem", 57, 1),
        Among("\u00E2sem", 57, 1),
        Among("im", -1, 2),
        Among("\u00E2m", -1, 2),
        Among("\u0103m", -1, 2),
        Among("ar\u0103m", 65, 1),
        Among("ser\u0103m", 65, 2),
        Among("aser\u0103m", 67, 1),
        Among("seser\u0103m", 67, 2),
        Among("iser\u0103m", 67, 1),
        Among("user\u0103m", 67, 1),
        Among("\u00E2ser\u0103m", 67, 1),
        Among("ir\u0103m", 65, 1),
        Among("ur\u0103m", 65, 1),
        Among("\u00E2r\u0103m", 65, 1),
        Among("au", -1, 1),
        Among("eau", 76, 1),
        Among("iau", 76, 1),
        Among("indu", -1, 1),
        Among("\u00E2ndu", -1, 1),
        Among("ez", -1, 1),
        Among("easc\u0103", -1, 1),
        Among("ar\u0103", -1, 1),
        Among("ser\u0103", -1, 2),
        Among("aser\u0103", 84, 1),
        Among("seser\u0103", 84, 2),
        Among("iser\u0103", 84, 1),
        Among("user\u0103", 84, 1),
        Among("\u00E2ser\u0103", 84, 1),
        Among("ir\u0103", -1, 1),
        Among("ur\u0103", -1, 1),
        Among("\u00E2r\u0103", -1, 1),
        Among("eaz\u0103", -1, 1)
    ]

    a_5 = [
        Among("a", -1, 1),
        Among("e", -1, 1),
        Among("ie", 1, 1),
        Among("i", -1, 1),
        Among("\u0103", -1, 1)
    ]

    g_v = [17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 4]

    B_standard_suffix_removed = False
    I_p2 = 0
    I_p1 = 0
    I_pV = 0

    def __r_prelude(self):
        while True:
            v_1 = self.cursor
            try:
                try:
                    while True:
                        v_2 = self.cursor
                        try:
                            if not self.in_grouping(RomanianStemmer.g_v, 97, 259):
                                raise lab2()
                            self.bra = self.cursor
                            try:
                                v_3 = self.cursor
                                try:
                                    if not self.eq_s("u"):
                                        raise lab4()
                                    self.ket = self.cursor
                                    if not self.in_grouping(RomanianStemmer.g_v, 97, 259):
                                        raise lab4()
                                    if not self.slice_from("U"):
                                        return False
                                    raise lab3()
                                except lab4: pass
                                self.cursor = v_3
                                if not self.eq_s("i"):
                                    raise lab2()
                                self.ket = self.cursor
                                if not self.in_grouping(RomanianStemmer.g_v, 97, 259):
                                    raise lab2()
                                if not self.slice_from("I"):
                                    return False
                            except lab3: pass
                            self.cursor = v_2
                            raise lab1()
                        except lab2: pass
                        self.cursor = v_2
                        if self.cursor >= self.limit:
                            raise lab0()
                        self.cursor += 1
                except lab1: pass
                continue
            except lab0: pass
            self.cursor = v_1
            break
        return True

    def __r_mark_regions(self):
        self.I_pV = self.limit
        self.I_p1 = self.limit
        self.I_p2 = self.limit
        v_1 = self.cursor
        try:
            try:
                v_2 = self.cursor
                try:
                    if not self.in_grouping(RomanianStemmer.g_v, 97, 259):
                        raise lab2()
                    try:
                        v_3 = self.cursor
                        try:
                            if not self.out_grouping(RomanianStemmer.g_v, 97, 259):
                                raise lab4()
                            if not self.go_out_grouping(RomanianStemmer.g_v, 97, 259):
                                raise lab4()
                            self.cursor += 1
                            raise lab3()
                        except lab4: pass
                        self.cursor = v_3
                        if not self.in_grouping(RomanianStemmer.g_v, 97, 259):
                            raise lab2()
                        if not self.go_in_grouping(RomanianStemmer.g_v, 97, 259):
                            raise lab2()
                        self.cursor += 1
                    except lab3: pass
                    raise lab1()
                except lab2: pass
                self.cursor = v_2
                if not self.out_grouping(RomanianStemmer.g_v, 97, 259):
                    raise lab0()
                try:
                    v_4 = self.cursor
                    try:
                        if not self.out_grouping(RomanianStemmer.g_v, 97, 259):
                            raise lab6()
                        if not self.go_out_grouping(RomanianStemmer.g_v, 97, 259):
                            raise lab6()
                        self.cursor += 1
                        raise lab5()
                    except lab6: pass
                    self.cursor = v_4
                    if not self.in_grouping(RomanianStemmer.g_v, 97, 259):
                        raise lab0()
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                except lab5: pass
            except lab1: pass
            self.I_pV = self.cursor
        except lab0: pass
        self.cursor = v_1
        v_5 = self.cursor
        try:
            if not self.go_out_grouping(RomanianStemmer.g_v, 97, 259):
                raise lab7()
            self.cursor += 1
            if not self.go_in_grouping(RomanianStemmer.g_v, 97, 259):
                raise lab7()
            self.cursor += 1
            self.I_p1 = self.cursor
            if not self.go_out_grouping(RomanianStemmer.g_v, 97, 259):
                raise lab7()
            self.cursor += 1
            if not self.go_in_grouping(RomanianStemmer.g_v, 97, 259):
                raise lab7()
            self.cursor += 1
            self.I_p2 = self.cursor
        except lab7: pass
        self.cursor = v_5
        return True

    def __r_postlude(self):
        while True:
            v_1 = self.cursor
            try:
                self.bra = self.cursor
                among_var = self.find_among(RomanianStemmer.a_0)
                if among_var == 0:
                    raise lab0()
                self.ket = self.cursor
                if among_var == 1:
                    if not self.slice_from("i"):
                        return False
                elif among_var == 2:
                    if not self.slice_from("u"):
                        return False
                else:
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                continue
            except lab0: pass
            self.cursor = v_1
            break
        return True

    def __r_RV(self):
        if not self.I_pV <= self.cursor:
            return False
        return True

    def __r_R1(self):
        if not self.I_p1 <= self.cursor:
            return False
        return True

    def __r_R2(self):
        if not self.I_p2 <= self.cursor:
            return False
        return True

    def __r_step_0(self):
        self.ket = self.cursor
        among_var = self.find_among_b(RomanianStemmer.a_1)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.slice_from("a"):
                return False
        elif among_var == 3:
            if not self.slice_from("e"):
                return False
        elif among_var == 4:
            if not self.slice_from("i"):
                return False
        elif among_var == 5:
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b("ab"):
                    raise lab0()
                return False
            except lab0: pass
            self.cursor = self.limit - v_1
            if not self.slice_from("i"):
                return False
        elif among_var == 6:
            if not self.slice_from("at"):
                return False
        else:
            if not self.slice_from("a\u0163i"):
                return False
        return True

    def __r_combo_suffix(self):
        v_1 = self.limit - self.cursor
        self.ket = self.cursor
        among_var = self.find_among_b(RomanianStemmer.a_2)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if among_var == 1:
            if not self.slice_from("abil"):
                return False
        elif among_var == 2:
            if not self.slice_from("ibil"):
                return False
        elif among_var == 3:
            if not self.slice_from("iv"):
                return False
        elif among_var == 4:
            if not self.slice_from("ic"):
                return False
        elif among_var == 5:
            if not self.slice_from("at"):
                return False
        else:
            if not self.slice_from("it"):
                return False
        self.B_standard_suffix_removed = True
        self.cursor = self.limit - v_1
        return True

    def __r_standard_suffix(self):
        self.B_standard_suffix_removed = False
        while True:
            v_1 = self.limit - self.cursor
            try:
                if not self.__r_combo_suffix():
                    raise lab0()
                continue
            except lab0: pass
            self.cursor = self.limit - v_1
            break
        self.ket = self.cursor
        among_var = self.find_among_b(RomanianStemmer.a_3)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R2():
            return False
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.eq_s_b("\u0163"):
                return False
            self.bra = self.cursor
            if not self.slice_from("t"):
                return False
        else:
            if not self.slice_from("ist"):
                return False
        self.B_standard_suffix_removed = True
        return True

    def __r_verb_suffix(self):
        if self.cursor < self.I_pV:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_pV
        self.ket = self.cursor
        among_var = self.find_among_b(RomanianStemmer.a_4)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        if among_var == 1:
            try:
                v_3 = self.limit - self.cursor
                try:
                    if not self.out_grouping_b(RomanianStemmer.g_v, 97, 259):
                        raise lab1()
                    raise lab0()
                except lab1: pass
                self.cursor = self.limit - v_3
                if not self.eq_s_b("u"):
                    self.limit_backward = v_2
                    return False
            except lab0: pass
            if not self.slice_del():
                return False

        else:
            if not self.slice_del():
                return False

        self.limit_backward = v_2
        return True

    def __r_vowel_suffix(self):
        self.ket = self.cursor
        if self.find_among_b(RomanianStemmer.a_5) == 0:
            return False
        self.bra = self.cursor
        if not self.__r_RV():
            return False
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        v_1 = self.cursor
        self.__r_prelude()
        self.cursor = v_1
        self.__r_mark_regions()
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_3 = self.limit - self.cursor
        self.__r_step_0()
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_standard_suffix()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        try:
            try:
                v_6 = self.limit - self.cursor
                try:
                    if not self.B_standard_suffix_removed:
                        raise lab2()
                    raise lab1()
                except lab2: pass
                self.cursor = self.limit - v_6
                if not self.__r_verb_suffix():
                    raise lab0()
            except lab1: pass
        except lab0: pass
        self.cursor = self.limit - v_5
        v_7 = self.limit - self.cursor
        self.__r_vowel_suffix()
        self.cursor = self.limit - v_7
        self.cursor = self.limit_backward
        v_8 = self.cursor
        self.__r_postlude()
        self.cursor = v_8
        return True


class lab0(BaseException): pass


class lab1(BaseException): pass


class lab2(BaseException): pass


class lab3(BaseException): pass


class lab4(BaseException): pass


class lab5(BaseException): pass


class lab6(BaseException): pass


class lab7(BaseException): pass
