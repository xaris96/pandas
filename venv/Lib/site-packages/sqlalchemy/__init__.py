# __init__.py
# Copyright (C) 2005-2025 the SQLAlchemy authors and contributors
# <see AUTHORS file>
#
# This module is part of SQLAlchemy and is released under
# the MIT License: https://www.opensource.org/licenses/mit-license.php

from __future__ import annotations

from typing import Any

from . import util as _util
from .engine import (
    URL as URL,
    AdaptedConnection as AdaptedConnection,
    BaseRow as BaseRow,
    BindTyping as BindTyping,
    ChunkedIteratorResult as ChunkedIteratorResult,
    Compiled as Compiled,
    Connection as Connection,
    CreateEnginePlugin as CreateEnginePlugin,
    CursorResult as CursorResult,
    Dialect as Dialect,
    Engine as Engine,
    ExceptionContext as ExceptionContext,
    ExecutionContext as ExecutionContext,
    FrozenResult as FrozenResult,
    Inspector as Inspector,
    IteratorResult as IteratorResult,
    MappingResult as MappingResult,
    MergedResult as MergedResult,
    NestedTransaction as NestedTransaction,
    Result as Result,
    ResultProxy as ResultProxy,
    RootTransaction as RootTransaction,
    Row as Row,
    RowMapping as RowMapping,
    ScalarResult as ScalarResult,
    Transaction as Transaction,
    TwoPhaseTransaction as TwoPhaseTransaction,
    TypeCompiler as TypeCompiler,
    create_engine as create_engine,
    create_mock_engine as create_mock_engine,
    create_pool_from_url as create_pool_from_url,
    engine_from_config as engine_from_config,
    make_url as make_url,
    result_tuple as result_tuple,
)
from .inspection import inspect as inspect
from .pool import (
    AssertionPool as AssertionPool,
    AsyncAdaptedQueuePool as AsyncAdaptedQueuePool,
    FallbackAsyncAdaptedQueuePool as FallbackAsyncAdaptedQueuePool,
    NullPool as NullPool,
    Pool as Pool,
    PoolProxiedConnection as PoolProxiedConnection,
    PoolResetState as PoolResetState,
    QueuePool as QueuePool,
    SingletonThreadPool as SingletonThreadPool,
    StaticPool as StaticPool,
)
from .schema import (
    BLANK_SCHEMA as BLANK_SCHEMA,
    DDL as DDL,
    BaseDDLElement as BaseDDLElement,
    CheckConstraint as CheckConstraint,
    Column as Column,
    ColumnDefault as ColumnDefault,
    Computed as Computed,
    Constraint as Constraint,
    DDLElement as DDLElement,
    DefaultClause as DefaultClause,
    ExecutableDDLElement as ExecutableDDLElement,
    FetchedValue as FetchedValue,
    ForeignKey as ForeignKey,
    ForeignKeyConstraint as ForeignKeyConstraint,
    Identity as Identity,
    Index as Index,
    MetaData as MetaData,
    PrimaryKeyConstraint as PrimaryKeyConstraint,
    Sequence as Sequence,
    Table as Table,
    UniqueConstraint as UniqueConstraint,
    insert_sentinel as insert_sentinel,
)
from .sql import (
    ColumnExpressionArgument as ColumnExpressionArgument,
    NotNullable as NotNullable,
    Nullable as Nullable,
    SelectLabelStyle as SelectLabelStyle,
)
from .sql.expression import (
    CTE as CTE,
    LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT,
    LABEL_STYLE_DISAMBIGUATE_ONLY as LABEL_STYLE_DISAMBIGUATE_ONLY,
    LABEL_STYLE_NONE as LABEL_STYLE_NONE,
    LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL,
    Alias as Alias,
    AliasedReturnsRows as AliasedReturnsRows,
    BinaryExpression as BinaryExpression,
    BindParameter as BindParameter,
    BooleanClauseList as BooleanClauseList,
    CacheKey as CacheKey,
    Case as Case,
    Cast as Cast,
    ClauseElement as ClauseElement,
    ClauseList as ClauseList,
    CollectionAggregate as CollectionAggregate,
    ColumnClause as ColumnClause,
    ColumnCollection as ColumnCollection,
    ColumnElement as ColumnElement,
    ColumnOperators as ColumnOperators,
    CompoundSelect as CompoundSelect,
    Delete as Delete,
    Executable as Executable,
    Exists as Exists,
    Extract as Extract,
    False_ as False_,
    FromClause as FromClause,
    FromGrouping as FromGrouping,
    Function as Function,
    FunctionElement as FunctionElement,
    FunctionFilter as FunctionFilter,
    GenerativeSelect as GenerativeSelect,
    Grouping as Grouping,
    HasCTE as HasCTE,
    HasPrefixes as HasPrefixes,
    HasSuffixes as HasSuffixes,
    Insert as Insert,
    Join as Join,
    Label as Label,
    LambdaElement as LambdaElement,
    Lateral as Lateral,
    Null as Null,
    Operators as Operators,
    Over as Over,
    ReleaseSavepointClause as ReleaseSavepointClause,
    ReturnsRows as ReturnsRows,
    RollbackToSavepointClause as RollbackToSavepointClause,
    SavepointClause as SavepointClause,
    ScalarSelect as ScalarSelect,
    Select as Select,
    Selectable as Selectable,
    SelectBase as SelectBase,
    SQLColumnExpression as SQLColumnExpression,
    StatementLambdaElement as StatementLambdaElement,
    Subquery as Subquery,
    TableClause as TableClause,
    TableSample as TableSample,
    TableValuedAlias as TableValuedAlias,
    TextAsFrom as TextAsFrom,
    TextClause as TextClause,
    TextualSelect as TextualSelect,
    True_ as True_,
    TryCast as TryCast,
    Tuple as Tuple,
    TypeClause as TypeClause,
    TypeCoerce as TypeCoerce,
    UnaryExpression as UnaryExpression,
    Update as Update,
    UpdateBase as UpdateBase,
    Values as Values,
    ValuesBase as ValuesBase,
    Visitable as Visitable,
    WithinGroup as WithinGroup,
    alias as alias,
    all_ as all_,
    and_ as and_,
    any_ as any_,
    asc as asc,
    between as between,
    bindparam as bindparam,
    bitwise_not as bitwise_not,
    case as case,
    cast as cast,
    collate as collate,
    column as column,
    cte as cte,
    custom_op as custom_op,
    delete as delete,
    desc as desc,
    distinct as distinct,
    except_ as except_,
    except_all as except_all,
    exists as exists,
    extract as extract,
    false as false,
    func as func,
    funcfilter as funcfilter,
    insert as insert,
    intersect as intersect,
    intersect_all as intersect_all,
    join as join,
    label as label,
    lambda_stmt as lambda_stmt,
    lateral as lateral,
    literal as literal,
    literal_column as literal_column,
    modifier as modifier,
    not_ as not_,
    null as null,
    nulls_first as nulls_first,
    nulls_last as nulls_last,
    nullsfirst as nullsfirst,
    nullslast as nullslast,
    or_ as or_,
    outerjoin as outerjoin,
    outparam as outparam,
    over as over,
    quoted_name as quoted_name,
    select as select,
    table as table,
    tablesample as tablesample,
    text as text,
    true as true,
    try_cast as try_cast,
    tuple_ as tuple_,
    type_coerce as type_coerce,
    union as union,
    union_all as union_all,
    update as update,
    values as values,
    within_group as within_group,
)
from .types import (
    ARRAY as ARRAY,
    BIGINT as BIGINT,
    BINARY as BINARY,
    BLOB as BLOB,
    BOOLEAN as BOOLEAN,
    CHAR as CHAR,
    CLOB as CLOB,
    DATE as DATE,
    DATETIME as DATETIME,
    DECIMAL as DECIMAL,
    DOUBLE as DOUBLE,
    DOUBLE_PRECISION as DOUBLE_PRECISION,
    FLOAT as FLOAT,
    INT as INT,
    INTEGER as INTEGER,
    JSON as JSON,
    NCHAR as NCHAR,
    NUMERIC as NUMERIC,
    NVARCHAR as NVARCHAR,
    REAL as REAL,
    SMALLINT as SMALLINT,
    TEXT as TEXT,
    TIME as TIME,
    TIMESTAMP as TIMESTAMP,
    UUID as UUID,
    VARBINARY as VARBINARY,
    VARCHAR as VARCHAR,
    BigInteger as BigInteger,
    Boolean as Boolean,
    Date as Date,
    DateTime as DateTime,
    Double as Double,
    Enum as Enum,
    Float as Float,
    Integer as Integer,
    Interval as Interval,
    LargeBinary as LargeBinary,
    Numeric as Numeric,
    PickleType as PickleType,
    SmallInteger as SmallInteger,
    String as String,
    Text as Text,
    Time as Time,
    TupleType as TupleType,
    TypeDecorator as TypeDecorator,
    Unicode as Unicode,
    UnicodeText as UnicodeText,
    Uuid as Uuid,
)

__version__ = "2.0.40"


def __go(lcls: Any) -> None:
    _util.preloaded.import_prefix("sqlalchemy")

    from . import exc

    exc._version_token = "".join(__version__.split(".")[0:2])


__go(locals())


def __getattr__(name: str) -> Any:
    if name == "SingleonThreadPool":
        _util.warn_deprecated(
            "SingleonThreadPool was a typo in the v2 series. "
            "Please use the correct SingletonThreadPool name.",
            "2.0.24",
        )
        return SingletonThreadPool
    raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
