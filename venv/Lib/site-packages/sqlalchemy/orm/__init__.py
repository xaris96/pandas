# orm/__init__.py
# Copyright (C) 2005-2025 the SQLAlchemy authors and contributors
# <see AUTHORS file>
#
# This module is part of SQLAlchemy and is released under
# the MIT License: https://www.opensource.org/licenses/mit-license.php

"""
Functional constructs for ORM configuration.

See the SQLAlchemy object relational tutorial and mapper configuration
documentation for an overview of how this module is used.

"""

from __future__ import annotations

from typing import Any

from . import (
    exc as exc,
    mapper as mapperlib,
    strategy_options as strategy_options,
)
from .. import util as _sa_util
from ._orm_constructors import (
    _mapper_fn as mapper,
    aliased as aliased,
    backref as backref,
    clear_mappers as clear_mappers,
    column_property as column_property,
    composite as composite,
    contains_alias as contains_alias,
    create_session as create_session,
    deferred as deferred,
    dynamic_loader as dynamic_loader,
    join as join,
    mapped_column as mapped_column,
    orm_insert_sentinel as orm_insert_sentinel,
    outerjoin as outerjoin,
    query_expression as query_expression,
    relationship as relationship,
    synonym as synonym,
    with_loader_criteria as with_loader_criteria,
    with_polymorphic as with_polymorphic,
)
from .attributes import (
    AttributeEventToken as AttributeEventToken,
    InstrumentedAttribute as InstrumentedAttribute,
    QueryableAttribute as QueryableAttribute,
)
from .base import (
    DynamicMapped as DynamicMapped,
    InspectionAttrExtensionType as InspectionAttrExtensionType,
    LoaderCallableStatus as LoaderCallableStatus,
    Mapped as Mapped,
    NotExtension as NotExtension,
    ORMDescriptor as ORMDescriptor,
    PassiveFlag as PassiveFlag,
    SQLORMExpression as SQLORMExpression,
    WriteOnlyMapped as WriteOnlyMapped,
    class_mapper as class_mapper,
)
from .context import (
    FromStatement as FromStatement,
    QueryContext as QueryContext,
)
from .decl_api import (
    DeclarativeBase as DeclarativeBase,
    DeclarativeBaseNoMeta as DeclarativeBaseNoMeta,
    DeclarativeMeta as DeclarativeMeta,
    MappedAsDataclass as MappedAsDataclass,
    add_mapped_attribute as add_mapped_attribute,
    as_declarative as as_declarative,
    declarative_base as declarative_base,
    declarative_mixin as declarative_mixin,
    declared_attr as declared_attr,
    has_inherited_table as has_inherited_table,
    registry as registry,
    synonym_for as synonym_for,
)
from .decl_base import MappedClassProtocol as MappedClassProtocol
from .descriptor_props import (
    Composite as Composite,
    CompositeProperty as CompositeProperty,
    Synonym as Synonym,
    SynonymProperty as SynonymProperty,
)
from .dynamic import AppenderQuery as AppenderQuery
from .events import (
    AttributeEvents as AttributeEvents,
    InstanceEvents as InstanceEvents,
    InstrumentationEvents as InstrumentationEvents,
    MapperEvents as MapperEvents,
    QueryEvents as QueryEvents,
    SessionEvents as SessionEvents,
)
from .identity import IdentityMap as IdentityMap
from .instrumentation import ClassManager as ClassManager
from .interfaces import (
    EXT_CONTINUE as EXT_CONTINUE,
    EXT_SKIP as EXT_SKIP,
    EXT_STOP as EXT_STOP,
    MANYTOMANY as MANYTOMANY,
    MANYTOONE as MANYTOONE,
    NO_KEY as NO_KEY,
    NO_VALUE as NO_VALUE,
    ONETOMANY as ONETOMANY,
    InspectionAttr as InspectionAttr,
    InspectionAttrInfo as InspectionAttrInfo,
    MapperProperty as MapperProperty,
    PropComparator as PropComparator,
    RelationshipDirection as RelationshipDirection,
    UserDefinedOption as UserDefinedOption,
)
from .loading import (
    merge_frozen_result as merge_frozen_result,
    merge_result as merge_result,
)
from .mapped_collection import (
    KeyFuncDict as KeyFuncDict,
    MappedCollection as MappedCollection,
    attribute_keyed_dict as attribute_keyed_dict,
    attribute_mapped_collection as attribute_mapped_collection,
    column_keyed_dict as column_keyed_dict,
    column_mapped_collection as column_mapped_collection,
    keyfunc_mapping as keyfunc_mapping,
    mapped_collection as mapped_collection,
)
from .mapper import (
    Mapper as Mapper,
    configure_mappers as configure_mappers,
    reconstructor as reconstructor,
    validates as validates,
)
from .properties import (
    ColumnProperty as ColumnProperty,
    MappedColumn as MappedColumn,
    MappedSQLExpression as MappedSQLExpression,
)
from .query import (
    AliasOption as AliasOption,
    Query as Query,
)
from .relationships import (
    Relationship as Relationship,
    RelationshipProperty as RelationshipProperty,
    foreign as foreign,
    remote as remote,
)
from .scoping import (
    QueryPropertyDescriptor as QueryPropertyDescriptor,
    scoped_session as scoped_session,
)
from .session import (
    ORMExecuteState as ORMExecuteState,
    Session as Session,
    SessionTransaction as SessionTransaction,
    SessionTransactionOrigin as SessionTransactionOrigin,
    close_all_sessions as close_all_sessions,
    make_transient as make_transient,
    make_transient_to_detached as make_transient_to_detached,
    object_session as object_session,
    sessionmaker as sessionmaker,
)
from .state import (
    AttributeState as AttributeState,
    InstanceState as InstanceState,
)
from .strategy_options import (
    Load as Load,
    contains_eager as contains_eager,
    defaultload as defaultload,
    defer as defer,
    immediateload as immediateload,
    joinedload as joinedload,
    lazyload as lazyload,
    load_only as load_only,
    noload as noload,
    raiseload as raiseload,
    selectin_polymorphic as selectin_polymorphic,
    selectinload as selectinload,
    subqueryload as subqueryload,
    undefer as undefer,
    undefer_group as undefer_group,
    with_expression as with_expression,
)
from .unitofwork import UOWTransaction as UOWTransaction
from .util import (
    Bundle as Bundle,
    CascadeOptions as CascadeOptions,
    LoaderCriteriaOption as LoaderCriteriaOption,
    object_mapper as object_mapper,
    polymorphic_union as polymorphic_union,
    was_deleted as was_deleted,
    with_parent as with_parent,
)
from .writeonly import WriteOnlyCollection as WriteOnlyCollection


def __go(lcls: Any) -> None:
    _sa_util.preloaded.import_prefix("sqlalchemy.orm")
    _sa_util.preloaded.import_prefix("sqlalchemy.ext")


__go(locals())
