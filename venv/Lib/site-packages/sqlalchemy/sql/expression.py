# sql/expression.py
# Copyright (C) 2005-2025 the SQLAlchemy authors and contributors
# <see AUTHORS file>
#
# This module is part of SQLAlchemy and is released under
# the MIT License: https://www.opensource.org/licenses/mit-license.php

"""Defines the public namespace for SQL expression constructs.


"""


from __future__ import annotations

from ._dml_constructors import (
    delete as delete,
    insert as insert,
    update as update,
)
from ._elements_constructors import (
    all_ as all_,
    and_ as and_,
    any_ as any_,
    asc as asc,
    between as between,
    bindparam as bindparam,
    bitwise_not as bitwise_not,
    case as case,
    cast as cast,
    collate as collate,
    column as column,
    desc as desc,
    distinct as distinct,
    extract as extract,
    false as false,
    funcfilter as funcfilter,
    label as label,
    not_ as not_,
    null as null,
    nulls_first as nulls_first,
    nulls_last as nulls_last,
    or_ as or_,
    outparam as outparam,
    over as over,
    text as text,
    true as true,
    try_cast as try_cast,
    tuple_ as tuple_,
    type_coerce as type_coerce,
    within_group as within_group,
)
from ._selectable_constructors import (
    alias as alias,
    cte as cte,
    except_ as except_,
    except_all as except_all,
    exists as exists,
    intersect as intersect,
    intersect_all as intersect_all,
    join as join,
    lateral as lateral,
    outerjoin as outerjoin,
    select as select,
    table as table,
    tablesample as tablesample,
    union as union,
    union_all as union_all,
    values as values,
)
from ._typing import ColumnExpressionArgument as ColumnExpressionArgument
from .base import (
    ColumnCollection as ColumnCollection,
    Executable as Executable,
    _from_objects as _from_objects,
    _select_iterables as _select_iterables,
)
from .cache_key import CacheKey as CacheKey
from .dml import (
    Delete as Delete,
    Insert as Insert,
    Update as Update,
    UpdateBase as UpdateBase,
    ValuesBase as ValuesBase,
)
from .elements import (
    BinaryExpression as BinaryExpression,
    BindParameter as BindParameter,
    BooleanClauseList as BooleanClauseList,
    Case as Case,
    Cast as Cast,
    ClauseElement as ClauseElement,
    ClauseList as ClauseList,
    CollectionAggregate as CollectionAggregate,
    ColumnClause as ColumnClause,
    ColumnElement as ColumnElement,
    ExpressionClauseList as ExpressionClauseList,
    Extract as Extract,
    False_ as False_,
    FunctionFilter as FunctionFilter,
    Grouping as Grouping,
    Label as Label,
    Null as Null,
    Over as Over,
    ReleaseSavepointClause as ReleaseSavepointClause,
    RollbackToSavepointClause as RollbackToSavepointClause,
    SavepointClause as SavepointClause,
    SQLColumnExpression as SQLColumnExpression,
    TextClause as TextClause,
    True_ as True_,
    TryCast as TryCast,
    Tuple as Tuple,
    TypeClause as TypeClause,
    TypeCoerce as TypeCoerce,
    UnaryExpression as UnaryExpression,
    WithinGroup as WithinGroup,
    _truncated_label as _truncated_label,
    literal as literal,
    literal_column as literal_column,
    quoted_name as quoted_name,
)
from .functions import (
    Function as Function,
    FunctionElement as FunctionElement,
    func as func,
    modifier as modifier,
)
from .lambdas import (
    LambdaElement as LambdaElement,
    StatementLambdaElement as StatementLambdaElement,
    lambda_stmt as lambda_stmt,
)
from .operators import (
    ColumnOperators as ColumnOperators,
    Operators as Operators,
    custom_op as custom_op,
)
from .selectable import (
    CTE as CTE,
    LABEL_STYLE_DEFAULT as LABEL_STYLE_DEFAULT,
    LABEL_STYLE_DISAMBIGUATE_ONLY as LABEL_STYLE_DISAMBIGUATE_ONLY,
    LABEL_STYLE_NONE as LABEL_STYLE_NONE,
    LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL,
    Alias as Alias,
    AliasedReturnsRows as AliasedReturnsRows,
    CompoundSelect as CompoundSelect,
    Exists as Exists,
    FromClause as FromClause,
    FromGrouping as FromGrouping,
    GenerativeSelect as GenerativeSelect,
    HasCTE as HasCTE,
    HasPrefixes as HasPrefixes,
    HasSuffixes as HasSuffixes,
    Join as Join,
    Lateral as Lateral,
    ReturnsRows as ReturnsRows,
    ScalarSelect as ScalarSelect,
    ScalarValues as ScalarValues,
    Select as Select,
    Selectable as Selectable,
    SelectBase as SelectBase,
    SelectLabelStyle as SelectLabelStyle,
    Subquery as Subquery,
    TableClause as TableClause,
    TableSample as TableSample,
    TableValuedAlias as TableValuedAlias,
    TextAsFrom as TextAsFrom,
    TextualSelect as TextualSelect,
    Values as Values,
)
from .visitors import Visitable as Visitable

nullsfirst = nulls_first
"""Synonym for the :func:`.nulls_first` function."""


nullslast = nulls_last
"""Synonym for the :func:`.nulls_last` function."""
