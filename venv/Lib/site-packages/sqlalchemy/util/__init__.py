# util/__init__.py
# Copyright (C) 2005-2025 the SQLAlchemy authors and contributors
# <see AUTHORS file>
#
# This module is part of SQLAlchemy and is released under
# the MIT License: https://www.opensource.org/licenses/mit-license.php


from collections import defaultdict as defaultdict
from functools import (
    partial as partial,
    update_wrapper as update_wrapper,
)
from typing import TYPE_CHECKING

from . import preloaded as preloaded
from ._collections import (
    EMPTY_DICT as EMPTY_DICT,
    EMPTY_SET as EMPTY_SET,
    NONE_SET as NONE_SET,
    FacadeDict as FacadeDict,
    IdentitySet as IdentitySet,
    LRUCache as LRUCache,
    OrderedDict as OrderedDict,
    OrderedIdentitySet as OrderedIdentitySet,
    OrderedProperties as OrderedProperties,
    OrderedSet as OrderedSet,
    PopulateDict as PopulateDict,
    Properties as Properties,
    ReadOnlyContainer as ReadOnlyContainer,
    ReadOnlyProperties as ReadOnlyProperties,
    ScopedRegistry as ScopedRegistry,
    ThreadLocalRegistry as ThreadLocalRegistry,
    UniqueAppender as UniqueAppender,
    WeakPopulateDict as WeakPopulateDict,
    WeakSequence as WeakSequence,
    coerce_generator_arg as coerce_generator_arg,
    coerce_to_immutabledict as coerce_to_immutabledict,
    column_dict as column_dict,
    column_set as column_set,
    flatten_iterator as flatten_iterator,
    has_dupes as has_dupes,
    has_intersection as has_intersection,
    immutabledict as immutabledict,
    merge_lists_w_ordering as merge_lists_w_ordering,
    ordered_column_set as ordered_column_set,
    sort_dictionary as sort_dictionary,
    to_column_set as to_column_set,
    to_list as to_list,
    to_set as to_set,
    unique_list as unique_list,
    update_copy as update_copy,
)
from .compat import (
    anext_ as anext_,
    arm as arm,
    b as b,
    b64decode as b64decode,
    b64encode as b64encode,
    cmp as cmp,
    cpython as cpython,
    dataclass_fields as dataclass_fields,
    decode_backslashreplace as decode_backslashreplace,
    dottedgetter as dottedgetter,
    has_refcount_gc as has_refcount_gc,
    inspect_getfullargspec as inspect_getfullargspec,
    is64bit as is64bit,
    local_dataclass_fields as local_dataclass_fields,
    osx as osx,
    py38 as py38,
    py39 as py39,
    py310 as py310,
    py311 as py311,
    py312 as py312,
    py313 as py313,
    pypy as pypy,
    win32 as win32,
)
from .concurrency import (
    await_fallback as await_fallback,
    await_only as await_only,
    greenlet_spawn as greenlet_spawn,
    is_exit_exception as is_exit_exception,
)
from .deprecations import (
    became_legacy_20 as became_legacy_20,
    deprecated as deprecated,
    deprecated_cls as deprecated_cls,
    deprecated_params as deprecated_params,
    moved_20 as moved_20,
    warn_deprecated as warn_deprecated,
)
from .langhelpers import (
    EnsureKWArg as EnsureKWArg,
    FastIntFlag as FastIntFlag,
    HasMemoized as HasMemoized,
    HasMemoized_ro_memoized_attribute as HasMemoized_ro_memoized_attribute,
    MemoizedSlots as MemoizedSlots,
    NoneType as NoneType,
    PluginLoader as PluginLoader,
    TypingOnly as TypingOnly,
    add_parameter_text as add_parameter_text,
    as_interface as as_interface,
    asbool as asbool,
    asint as asint,
    assert_arg_type as assert_arg_type,
    attrsetter as attrsetter,
    bool_or_str as bool_or_str,
    chop_traceback as chop_traceback,
    class_hierarchy as class_hierarchy,
    classproperty as classproperty,
    clsname_as_plain_name as clsname_as_plain_name,
    coerce_kw_type as coerce_kw_type,
    constructor_copy as constructor_copy,
    constructor_key as constructor_key,
    counter as counter,
    create_proxy_methods as create_proxy_methods,
    decode_slice as decode_slice,
    decorator as decorator,
    dictlike_iteritems as dictlike_iteritems,
    duck_type_collection as duck_type_collection,
    ellipses_string as ellipses_string,
    format_argspec_init as format_argspec_init,
    format_argspec_plus as format_argspec_plus,
    generic_fn_descriptor as generic_fn_descriptor,
    generic_repr as generic_repr,
    get_annotations as get_annotations,
    get_callable_argspec as get_callable_argspec,
    get_cls_kwargs as get_cls_kwargs,
    get_func_kwargs as get_func_kwargs,
    getargspec_init as getargspec_init,
    has_compiled_ext as has_compiled_ext,
    hybridmethod as hybridmethod,
    hybridproperty as hybridproperty,
    inject_docstring_text as inject_docstring_text,
    iterate_attributes as iterate_attributes,
    map_bits as map_bits,
    md5_hex as md5_hex,
    memoized_instancemethod as memoized_instancemethod,
    memoized_property as memoized_property,
    method_is_overridden as method_is_overridden,
    methods_equivalent as methods_equivalent,
    monkeypatch_proxied_specials as monkeypatch_proxied_specials,
    non_memoized_property as non_memoized_property,
    only_once as only_once,
    parse_user_argument_for_enum as parse_user_argument_for_enum,
    portable_instancemethod as portable_instancemethod,
    quoted_token_parser as quoted_token_parser,
    ro_memoized_property as ro_memoized_property,
    ro_non_memoized_property as ro_non_memoized_property,
    rw_hybridproperty as rw_hybridproperty,
    safe_reraise as safe_reraise,
    set_creation_order as set_creation_order,
    string_or_unprintable as string_or_unprintable,
    symbol as symbol,
    unbound_method_to_callable as unbound_method_to_callable,
    walk_subclasses as walk_subclasses,
    warn as warn,
    warn_exception as warn_exception,
    warn_limited as warn_limited,
    wrap_callable as wrap_callable,
)
from .preloaded import preload_module as preload_module
from .typing import is_non_string_iterable as is_non_string_iterable
